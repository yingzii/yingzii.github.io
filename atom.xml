<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">Jie&#39;s blog</title>
    <subtitle type="html">分享</subtitle>
    <updated>2021-07-10T17:12:43&#43;08:00</updated>
    <id>https://ilog.vip/</id>
    <link rel="alternate" type="text/html" href="https://ilog.vip/" />
    <link rel="self" type="application/atom&#43;xml" href="https://ilog.vip/atom.xml" />
    <author>
            <name>徐连杰</name>
            <uri>https://ilog.vip/</uri>
            
                <email>im.lianjie@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.81.0">Hugo</generator>
        <entry>
            <title type="text">整数反转</title>
            <link rel="alternate" type="text/html" href="https://ilog.vip/post/leetcode_07/" />
            <id>https://ilog.vip/post/leetcode_07/</id>
            <updated>2021-07-04T20:24:00&#43;08:00</updated>
            <published>2021-03-11T17:37:16&#43;08:00</published>
            <author>
                    <name>徐连杰</name>
                    <uri>https://io-oi.me/</uri>
                    <email>im.lianjie@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights><summary type="html">整数反转 - LeetCode 07 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。 如果反转……</summary>
            
                <content type="html">&lt;h3 id=&#34;整数反转---leetcode-07&#34;&gt;整数反转 - LeetCode 07&lt;/h3&gt;
&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。&lt;/p&gt;
&lt;p&gt;如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。&lt;/p&gt;
&lt;p&gt;假设环境不允许存储 64 位整数（有符号或无符号）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：x = 123
输出：321
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// go
func reverse(x int) int {
    var res int
    for x != 0 {
        res = res * 10 +  x % 10 
        if !(-(1&amp;lt;&amp;lt;31) &amp;lt;= res &amp;amp;&amp;amp; res &amp;lt;= (1&amp;lt;&amp;lt;31)-1) {
			return 0
		}
        x = x / 10
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// c# 
public class Solution {
    public int Reverse(int x) {
        long res = 0;
        while(x != 0 ){
            res = res * 10 + x % 10 ;
            if (res &amp;gt; int.MaxValue || res &amp;lt; int.MinValue)
            {
                return 0;
            }
            x = x / 10;
        }
        return (int)res;
    }
}
&lt;/code&gt;&lt;/pre&gt;</content>
            
            
            
            
            
                
                    
                        
                            
                            
                            
                                <category scheme="https://ilog.vip/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/" term="杂技浅尝" label="杂技浅尝" />
                            
                        
                    
                
                    
                        
                            
                            
                            
                                <category scheme="https://ilog.vip/tags/%E6%95%B0%E5%AD%A6/" term="数学" label="数学" />
                            
                        
                    
                
            
        </entry>
    
</feed>
