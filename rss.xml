<?xml version="1.0" encoding="utf-8"?>






<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Jie&#39;s blog</title>
        <link>https://ilog.vip/</link>
        <description>分享</description>
        <generator>Hugo 0.81.0 https://gohugo.io/</generator>
        
            <language>zh-CN</language>
        
        
            <managingEditor>im.lianjie@gmail.com (徐连杰)</managingEditor>
        
        
            <webMaster>im.lianjie@gmail.com (徐连杰)</webMaster>
        
        
            <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
        
        <lastBuildDate>Sat, 10 Jul 2021 17:12:43 &#43;0800</lastBuildDate>
        
            <atom:link rel="self" type="application/rss&#43;xml" href="https://ilog.vip/rss.xml" />
        
        
            <item>
                <title>整数反转</title>
                <link>https://ilog.vip/post/leetcode_07/</link>
                <guid isPermaLink="true">https://ilog.vip/post/leetcode_07/</guid>
                <pubDate>Thu, 11 Mar 2021 17:37:16 &#43;0800</pubDate>
                
                    <author>im.lianjie@gmail.com (徐连杰)</author>
                
                <copyright>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</copyright>
                
                    <description>&lt;h3 id=&#34;整数反转---leetcode-07&#34;&gt;整数反转 - LeetCode 07&lt;/h3&gt;
&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。&lt;/p&gt;
&lt;p&gt;如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。&lt;/p&gt;
&lt;p&gt;假设环境不允许存储 64 位整数（有符号或无符号）。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;输入：x = 123
输出：321
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// go
func reverse(x int) int {
    var res int
    for x != 0 {
        res = res * 10 +  x % 10 
        if !(-(1&amp;lt;&amp;lt;31) &amp;lt;= res &amp;amp;&amp;amp; res &amp;lt;= (1&amp;lt;&amp;lt;31)-1) {
			return 0
		}
        x = x / 10
    }
    return res
}
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// c# 
public class Solution {
    public int Reverse(int x) {
        long res = 0;
        while(x != 0 ){
            res = res * 10 + x % 10 ;
            if (res &amp;gt; int.MaxValue || res &amp;lt; int.MinValue)
            {
                return 0;
            }
            x = x / 10;
        }
        return (int)res;
    }
}
&lt;/code&gt;&lt;/pre&gt;</description>
                
                
                
                
                
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ilog.vip/categories/%E6%9D%82%E6%8A%80%E6%B5%85%E5%B0%9D/">杂技浅尝</category>
                                
                            
                        
                    
                        
                            
                                
                                
                                
                                    <category domain="https://ilog.vip/tags/%E6%95%B0%E5%AD%A6/">数学</category>
                                
                            
                        
                    
                
            </item>
        
    </channel>
</rss>
